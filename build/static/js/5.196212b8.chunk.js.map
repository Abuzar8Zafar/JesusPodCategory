{"version":3,"sources":["Components/Screen/AddCategory/ListCategory.jsx"],"names":["ListCategory","_Rowdata$category","channelLoading","setChannelLoading","useState","Chanalsdata","setChanalsdata","ChanalsSortedData","setChanalsSortedData","Editmodal","setEditmodal","inputType","setInputType","passwordVisible","setPasswordVisible","loading","setLoading","snackbarOpen","setSnackbarOpen","snackbarMessage","setSnackbarMessage","snackbarSeverity","setSnackbarSeverity","Cat","setCat","RowID","setRowID","profileImage","setProfileImage","SelectedImg","setSelectedImg","Rowdata","setRowdata","loadingupload","setloadingupload","titleSortOrder","setTitleSortOrder","catSortOrder","setCatSortOrder","searchQuery","setSearchQuery","getChannelsWithCategories","async","channelsCollection","collection","firestore","channels","getDocs","docs","map","doc","id","data","console","log","slice","error","SelectImage","e","file","target","files","reader","FileReader","onloadend","result","readAsDataURL","courseFile","uniqueFileName","Date","getTime","name","imageRef","ref","storage","uploadBytes","then","snapshot","getDownloadURL","url","showSnackbar","uploadImage","initialValues","cat","category","find","getCategoryIDByName","title","validationSchema","Yup","shape","required","message","severity","useEffect","categoryCollection","categories","getCategories","handleSort","sortOrder","newSortOrder","sortedData","sort","a","b","firstLetterA","charAt","toLowerCase","firstLetterB","_a$category","_a$category$name","_b$category","_b$category$name","timer","setTimeout","filter","item","index","_item$title","_item$title$toLowerCa","includes","clearTimeout","NameWithIcon","_ref","_jsxs","style","display","alignItems","children","_jsx","marginLeft","onClick","width","height","viewBox","fill","d","columns","selector","row","maxWidth","minWidth","ImageLoader","classes","imageUrl","circeltrue","_row$category","cell","_Fragment","className","cursor","padding","handleEdit","channelRef","deleteDoc","handleDelete","CustomSnackbar","open","onClose","handleSnackbarClose","Modal","footer","centered","onCancel","handleCancel","Formik","enableReinitialize","onSubmit","values","_ref2","setSubmitting","categoryDocRef","categoryDoc","getDoc","exists","Error","categoryData","docRef","updateDoc","sub","download","star","handleSubmit","_ref3","errors","touched","handleChange","handleBlur","Form","Group","controlId","Label","Select","value","onChange","Control","placeholder","flexDirection","position","htmlFor","Spinner","marginTop","borderWidth","top","right","zIndex","color","animation","role","src","alt","objectFit","borderRadius","fileavatar","InputStrap","type","disabled","DataTable","pagination"],"mappings":"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","file":"static/js/5.196212b8.chunk.js","sourcesContent":["/* eslint-disable eqeqeq */\n/* eslint-disable react-hooks/exhaustive-deps */\n/* eslint-disable no-unused-vars */\nimport React, { useEffect, useState } from \"react\";\nimport { Spinner } from \"react-bootstrap\";\nimport { Form, Table } from \"react-bootstrap\";\nimport DataTable from \"react-data-table-component\";\nimport ImageLoader from \"../../ImageLoader/ImageLoader\";\nimport {\n  addDoc,\n  collection,\n  doc,\n  getDoc,\n  getDocs,\n  setDoc,\n  deleteDoc,\n  updateDoc,\n} from \"firebase/firestore\";\nimport { Input as InputStrap } from \"reactstrap\";\n\nimport { auth, firestore, storage } from \"../../Firebase/Config\";\nimport { Modal } from \"antd\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { Formik, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport CustomSnackbar from \"../../SnackBar/CustomSnackbar\";\n\nimport fileavatar from \"../../../assets/images/profileavatar.jpg\";\nimport { getDownloadURL, ref, uploadBytes } from \"firebase/storage\";\n\nconst ListCategory = () => {\n  const [channelLoading, setChannelLoading] = useState(false);\n  const [Chanalsdata, setChanalsdata] = useState([]);\n  const [ChanalsSortedData, setChanalsSortedData] = useState([]);\n  const [Editmodal, setEditmodal] = useState(false);\n  const [inputType, setInputType] = useState(\"password\");\n  const [passwordVisible, setPasswordVisible] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\n  const [snackbarMessage, setSnackbarMessage] = useState(\"\");\n  const [snackbarSeverity, setSnackbarSeverity] = useState(\"info\");\n  const [Cat, setCat] = useState([]);\n  const [RowID, setRowID] = useState(\"\");\n  const [profileImage, setProfileImage] = useState(\"\");\n  const [SelectedImg, setSelectedImg] = useState(\"\");\n  const [Rowdata, setRowdata] = useState(\"\");\n  const [loadingupload, setloadingupload] = useState(false);\n  const [titleSortOrder, setTitleSortOrder] = useState(null);\n  const [catSortOrder, setCatSortOrder] = useState(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const handleSearchChange = (e) => {\n    setSearchQuery(e.target.value);\n  };\n\n  const getCategories = async () => {\n    try {\n      // Reference to the 'category' collection\n      const categoryCollection = collection(firestore, \"category\");\n\n      // Fetch all documents in the collection\n      const categorySnapshot = await getDocs(categoryCollection);\n\n      // Extract data from each document\n      const categories = categorySnapshot.docs.map((doc) => ({\n        id: doc.id,\n        ...doc.data(),\n      }));\n\n      // Log and return the categories\n      setCat(categories);\n      return categories;\n    } catch (error) {\n      console.error(\"Error fetching categories:\", error);\n      throw error;\n    }\n  };\n\n  const getChannelsWithCategories = async () => {\n    setChannelLoading(true);\n    try {\n      const channelsCollection = collection(firestore, \"Newchannels\");\n      const channelsSnapshot = await getDocs(channelsCollection);\n      const channels = channelsSnapshot.docs.map((doc) => ({\n        id: doc.id,\n        ...doc.data(),\n      }));\n      console.log(\"CHANNNELS ======> \", channels?.slice(0, 20));\n      setChanalsdata(channels);\n      setChanalsSortedData(channels);\n      setChannelLoading(false);\n    } catch (error) {\n      console.error(\"Error fetching channels with categories:\", error);\n      setChannelLoading(false);\n      throw error;\n    }\n  };\n\n  const uploadImage = (courseFile) => {\n    if (!courseFile) return;\n    setloadingupload(true);\n    const currentDate = new Date();\n    const uniqueFileName = `${currentDate.getTime()}_${courseFile?.name}`;\n    const imageRef = ref(storage, `UserImages/${uniqueFileName}`);\n    uploadBytes(imageRef, courseFile).then((snapshot) => {\n      getDownloadURL(snapshot.ref).then((url) => {\n        showSnackbar(\"Image Added Sucessfully\", \"success\");\n        setProfileImage(url);\n        setloadingupload(false);\n      });\n    });\n  };\n\n  const SelectImage = (e) => {\n    const file = e.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setSelectedImg(reader.result);\n      };\n      reader.readAsDataURL(file);\n    } else {\n      setSelectedImg(null);\n    }\n    if (file) {\n      uploadImage(file);\n    }\n  };\n\n  const getCategoryIDByName = (name) => {\n    const category = Cat.find((category) => category.name === name);\n    return category?.id;\n  };\n\n  const initialValues = {\n    cat: getCategoryIDByName(Rowdata?.category?.name),\n    title: Rowdata?.title,\n    url: Rowdata?.url,\n  };\n\n  const validationSchema = Yup.object().shape({\n    cat: Yup.string().required(\"Category name is required\"),\n    title: Yup.string().required(\"Title is required\"),\n    url: Yup.string().required(\"Feed url is required\"),\n  });\n\n  const handleDelete = async (id) => {\n    try {\n      const channelRef = collection(firestore, \"Newchannels\");\n      await deleteDoc(doc(channelRef, id));\n      // After deletion, refresh data\n      getChannelsWithCategories();\n    } catch (error) {\n      console.error(\"Error deleting channel:\", error);\n    }\n  };\n\n  const handleSubmit = async (values) => {\n    setLoading(true);\n    try {\n      // Fetch the category object by categoryId\n      const categoryDocRef = doc(firestore, \"category\", values?.cat);\n      const categoryDoc = await getDoc(categoryDocRef);\n\n      if (!categoryDoc.exists()) {\n        setLoading(false);\n        throw new Error(\"Category not found\");\n      }\n\n      const categoryData = categoryDoc.data();\n\n      // Reference to the 'channels' collection\n      const channelsCollection = collection(firestore, \"Newchannels\");\n\n      let docRef;\n\n      if (RowID) {\n        // Update the existing document\n        docRef = doc(firestore, \"Newchannels\", RowID);\n        await updateDoc(docRef, {\n          title: values?.title,\n          imageUrl: profileImage,\n          url: values?.url,\n          category: categoryData, // Including the full category object\n          // Assuming you want to update these fields as well\n          sub: [],\n          download: [],\n          star: [],\n        });\n        setEditmodal(false);\n        showSnackbar(\"Podcast Updated Successfully\", \"success\");\n      }\n\n      return docRef.id;\n    } catch (error) {\n      setLoading(false);\n      console.error(\"Error adding or updating channel:\", error);\n      throw error;\n    }\n  };\n\n  const showSnackbar = (message, severity) => {\n    setSnackbarMessage(message);\n    setSnackbarSeverity(severity);\n    setSnackbarOpen(true);\n  };\n\n  const handleEdit = (row) => {\n    setRowdata(row);\n    setRowID(row?.id);\n    setProfileImage(row?.imageUrl);\n    setEditmodal(true);\n  };\n\n  const handleCancel = () => {\n    setEditmodal(false);\n  };\n\n  useEffect(() => {\n    getChannelsWithCategories();\n    getCategories();\n  }, []);\n\n  const handleSort = (title, sortOrder) => {\n    const newSortOrder = sortOrder === \"asc\" ? \"desc\" : \"asc\";\n    if (title == \"Title\") {\n      const sortedData = [...ChanalsSortedData].sort((a, b) => {\n        const firstLetterA = a.title.charAt(0).toLowerCase();\n        const firstLetterB = b.title.charAt(0).toLowerCase();\n\n        if (newSortOrder === \"asc\") {\n          return firstLetterA < firstLetterB\n            ? -1\n            : firstLetterA > firstLetterB\n            ? 1\n            : 0;\n        } else {\n          return firstLetterA > firstLetterB\n            ? -1\n            : firstLetterA < firstLetterB\n            ? 1\n            : 0;\n        }\n      });\n      setTitleSortOrder(newSortOrder);\n      // setChanalsdata(sortedData);\n      setChanalsSortedData(sortedData);\n    } else if (title == \"Cat Name\") {\n      const sortedData = [...ChanalsSortedData].sort((a, b) => {\n        const firstLetterA = a?.category?.name?.charAt(0).toLowerCase();\n        const firstLetterB = b?.category?.name?.charAt(0).toLowerCase();\n\n        console.log(firstLetterA, firstLetterB);\n\n        if (newSortOrder === \"asc\") {\n          return firstLetterA < firstLetterB\n            ? -1\n            : firstLetterA > firstLetterB\n            ? 1\n            : 0;\n        } else {\n          return firstLetterA > firstLetterB\n            ? -1\n            : firstLetterA < firstLetterB\n            ? 1\n            : 0;\n        }\n      });\n      setCatSortOrder(newSortOrder);\n      // setChanalsdata(sortedData);\n      setChanalsSortedData(sortedData);\n    }\n    // Sorting logic as explained in the previous answer...\n  };\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      if (searchQuery) {\n        const sortedData = ChanalsSortedData?.filter((item, index) =>\n          item?.title?.toLowerCase()?.includes(searchQuery?.toLowerCase())\n        );\n        setChanalsSortedData(sortedData);\n      } else setChanalsSortedData(Chanalsdata);\n      // const sortedData = Chanalsdata?.filter((item, index) =>\n      //   item?.title?.toLowerCase()?.includes(searchQuery?.toLocaleLowerCase)\n      // );\n      // setChanalsSortedData(sortedData);\n    }, 500);\n\n    return () => {\n      clearTimeout(timer); // Clear the timer on cleanup\n    };\n  }, [searchQuery, Chanalsdata]);\n\n  const NameWithIcon = ({ name, sortOrder }) => {\n    const getSortIcon = () => {\n      if (sortOrder === \"asc\") {\n        return (\n          <div onClick={() => handleSort(name, sortOrder)}>\n            <svg width=\"30\" height=\"30\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n              <path d=\"M7 14l5-5 5 5H7z\" /> {/* Up arrow for ascending */}\n            </svg>\n          </div>\n        );\n      } else if (sortOrder === \"desc\") {\n        return (\n          <div onClick={() => handleSort(name, sortOrder)}>\n            <svg width=\"30\" height=\"30\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n              <path d=\"M7 10l5 5 5-5H7z\" /> {/* Down arrow for descending */}\n            </svg>\n          </div>\n        );\n      }\n      return null; // No icon if no sort order is specified\n    };\n\n    return (\n      <div style={{ display: \"flex\", alignItems: \"center\" }}>\n        <span>{name}</span>\n        {sortOrder && (\n          <span style={{ marginLeft: \"5px\" }}>{getSortIcon()}</span>\n        )}\n      </div>\n    );\n  };\n\n  const columns = [\n    {\n      name: \"#\",\n      selector: (row, index) => index,\n      maxWidth: \"7rem\",\n      minWidth: \"2rem\",\n    },\n    {\n      name: \"Image\",\n      selector: (row) => (\n        <ImageLoader\n          classes={\"tableImg\"}\n          imageUrl={row?.imageUrl}\n          circeltrue={true}\n        />\n      ),\n      maxWidth: \"7rem\",\n      minWidth: \"2rem\",\n    },\n    {\n      name: <NameWithIcon name=\"Title\" sortOrder={titleSortOrder || \"asc\"} />,\n      selector: (row) => row?.title,\n      maxWidth: \"10rem\",\n      minWidth: \"4rem\",\n      // sortable: true,\n      // sortFunction: (a, b) => {\n      //   const firstLetterA = a.title.charAt(0).toLowerCase();\n      //   const firstLetterB = b.title.charAt(0).toLowerCase();\n      //   if (firstLetterA < firstLetterB) return -1;\n      //   if (firstLetterA > firstLetterB) return 1;\n      // },\n    },\n    {\n      name: <NameWithIcon name=\"Cat Name\" sortOrder={catSortOrder || \"asc\"} />,\n      selector: (row) => row?.category?.name,\n      maxWidth: \"7rem\",\n      minWidth: \"2rem\",\n    },\n    {\n      name: \"Feed Url\",\n      selector: (row) => row?.url,\n      maxWidth: \"30rem\",\n      minWidth: \"20rem\",\n    },\n    {\n      name: \"Actions\",\n      cell: (row) => (\n        <>\n          <button\n            className=\"loginBtn2\"\n            style={{ cursor: \"pointer\", padding: \"2px 10px\" }}\n            onClick={() => handleEdit(row)}\n          >\n            Edit\n          </button>\n          <button\n            className=\"loginBtn2\"\n            style={{ cursor: \"pointer\", padding: \"2px 10px\", marginLeft: 20 }}\n            onClick={() => handleDelete(row.id)}\n          >\n            Delete\n          </button>\n        </>\n      ),\n      maxWidth: \"10rem\",\n      minWidth: \"10rem\",\n    },\n  ];\n  const handleSnackbarClose = () => {\n    setSnackbarOpen(false);\n  };\n\n  return (\n    <>\n      <CustomSnackbar\n        open={snackbarOpen}\n        message={snackbarMessage}\n        severity={snackbarSeverity}\n        onClose={handleSnackbarClose}\n      />\n      <Modal\n        title=\"Basic Modal\"\n        footer={false}\n        open={Editmodal}\n        centered\n        onCancel={handleCancel}\n      >\n        <Formik\n          initialValues={initialValues}\n          enableReinitialize={true}\n          validationSchema={validationSchema}\n          onSubmit={(values, { setSubmitting }) => {\n            handleSubmit(values);\n          }}\n        >\n          {({\n            values,\n            errors,\n            touched,\n            handleChange,\n            handleBlur,\n            handleSubmit,\n          }) => (\n            <Form\n              className=\"formHead\"\n              // style={{ width: \"40%\" }}\n              onSubmit={handleSubmit}\n            >\n              <section>\n                <Form.Group\n                  className=\"mb-2 hideFocus2\"\n                  controlId=\"formGroupEmail\"\n                >\n                  <Form.Label className=\"lableHead\">Add Category</Form.Label>\n\n                  <Form.Select\n                    aria-label=\"Default select example\"\n                    className=\"radius_12\"\n                    name=\"cat\"\n                    value={values.cat}\n                    onChange={handleChange}\n                  >\n                    {Cat.map((category) => (\n                      <option key={category.id} value={category.id}>\n                        {category.name}\n                      </option>\n                    ))}\n                  </Form.Select>\n\n                  {touched.cat && errors.cat && (\n                    <div className=\"errorMsg\">{errors.cat}</div>\n                  )}\n\n                  <Form.Label className=\"lableHead mt-3\">Add Title</Form.Label>\n\n                  <Form.Control\n                    className=\"radius_12 \"\n                    placeholder=\"Title\"\n                    name=\"title\"\n                    value={values.title}\n                    onChange={handleChange}\n                  />\n                  {touched.title && errors.title && (\n                    <div className=\"errorMsg\">{errors.title}</div>\n                  )}\n\n                  <Form.Label className=\"lableHead mt-3\">\n                    Add Feed Url\n                  </Form.Label>\n                  <Form.Control\n                    className=\"radius_12 \"\n                    placeholder=\"Url\"\n                    name=\"url\"\n                    value={values.url}\n                    onChange={handleChange}\n                  />\n                  {touched.url && errors.url && (\n                    <div className=\"errorMsg\">{errors.url}</div>\n                  )}\n                </Form.Group>\n\n                <div className=\"d-flex \" style={{ flexDirection: \"column\" }}>\n                  <h6 className=\"lableHead mt-2 mb-2\">Upload Image</h6>\n                  <div>\n                    <label\n                      style={{ cursor: \"pointer\", position: \"relative\" }}\n                      htmlFor=\"fileInput\"\n                      className=\"cursor-pointer\"\n                    >\n                      {loadingupload && (\n                        <Spinner\n                          style={{\n                            width: \"18px\",\n                            height: \"18px\",\n                            marginTop: \"3px\",\n                            borderWidth: \"0.15em\",\n                            position: \"absolute\",\n                            top: \"2rem\",\n                            right: \"2.5rem\",\n                            zIndex: \"99999\",\n                            color: \"white\",\n                          }}\n                          animation=\"border\"\n                          role=\"status\"\n                        >\n                          <span className=\"visually-hidden\">Loading...</span>\n                        </Spinner>\n                      )}\n                      {profileImage ? (\n                        <>\n                          <img\n                            src={profileImage}\n                            alt=\"Preview\"\n                            style={{\n                              width: \"100px\",\n                              height: \"100px\",\n                              objectFit: \"cover\",\n                              borderRadius: \"50%\",\n                              position: \"relative\",\n                            }}\n                            className=\"object-cover\"\n                          />\n                        </>\n                      ) : (\n                        <div className=\"border radius_50 flex justify-content-center items-center\">\n                          <img\n                            src={fileavatar}\n                            alt=\"Camera Icon\"\n                            width={80}\n                            height={80}\n                          />\n                        </div>\n                      )}\n                    </label>\n\n                    <InputStrap\n                      type=\"file\"\n                      // required\n                      id=\"fileInput\"\n                      className=\"visually-hidden\"\n                      onChange={SelectImage}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"d-flex flex-column w-50\">\n                  <button\n                    disabled={loading}\n                    className={`loginBtn mt-3 ${loading ? \"disbalebtn\" : \"\"}`}\n                  >\n                    {loading ? (\n                      <Spinner\n                        style={{\n                          width: \"18px\",\n                          height: \"18px\",\n                          marginTop: \"3px\",\n                          borderWidth: \"0.15em\",\n                        }}\n                        animation=\"border\"\n                        role=\"status\"\n                      >\n                        <span className=\"visually-hidden\">Loading...</span>\n                      </Spinner>\n                    ) : (\n                      \"Submit\"\n                    )}\n                  </button>\n                </div>\n              </section>\n            </Form>\n          )}\n        </Formik>\n      </Modal>\n\n      {channelLoading ? (\n        <div className=\"text-center\">\n          <Spinner\n            style={{\n              width: \"18px\",\n              height: \"18px\",\n              marginTop: \"3px\",\n              borderWidth: \"0.15em\",\n            }}\n            animation=\"border\"\n            role=\"status\"\n          >\n            <span className=\"visually-hidden\">Loading...</span>\n          </Spinner>\n        </div>\n      ) : (\n        <>\n          <div className=\"cat-input-con\">\n            <input\n              type=\"text\"\n              value={searchQuery}\n              onChange={handleSearchChange}\n              placeholder=\"Search for category\"\n              className=\"cat-input\"\n            />\n          </div>\n          <DataTable columns={columns} data={ChanalsSortedData} pagination />\n        </>\n      )}\n    </>\n  );\n};\n\nexport default ListCategory;\n"],"sourceRoot":""}
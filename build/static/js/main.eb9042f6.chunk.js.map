{"version":3,"sources":["Redux/Slices/AuthSlice.jsx","reportWebVitals.js","Redux/Store.jsx","index.js"],"names":["authSlice","createSlice","name","initialState","user","isAuthenticated","token","reducers","setUser","state","action","payload","logout","setAuthenticated","setToken","setAgeVerified","actions","selectUser","auth","selectIsAuthenticated","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","persistConfig","key","storage","rootReducer","combineReducers","persistReducer","authReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","persistor","persistStore","App","lazy","ReactDOM","createRoot","document","getElementById","render","_jsx","Provider","children","PersistGate","loading","Suspense","fallback","className","Spinner","animation","variant","React","StrictMode","BrowserRouter"],"mappings":"uGAAA,uNAGA,MAAMA,EAAYC,YAAY,CAC5BC,KAAM,OACNC,aAAc,CACZC,KAAM,KACNC,iBAAiB,EACjBC,MAAO,MAETC,SAAU,CACRC,QAASA,CAACC,EAAOC,KACfD,EAAML,KAAOM,EAAOC,OAAO,EAE7BC,OAASH,IACPA,EAAML,KAAO,KACbK,EAAMJ,iBAAkB,CAAK,EAE/BQ,iBAAkBA,CAACJ,EAAOC,KACxBD,EAAMJ,gBAAkBK,EAAOC,OAAO,EAExCG,SAAUA,CAACL,EAAOC,KAChBD,EAAMH,MAAQI,EAAOC,OAAO,MAKrB,QAAEH,EAAO,OAAEI,EAAM,eAAEG,EAAc,iBAAEF,EAAgB,SAAEC,GAChEd,EAAUgB,QACCC,EAAcR,GAAUA,EAAMS,KAAKd,KACnCe,EAAyBV,GAAUA,EAAMS,KAAKb,gBAG5CL,MAAiB,O,iHCrBjBoB,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,+BAAqBC,MAAKC,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,EAAY,GAExB,E,uDCFF,MAAMS,EAAgB,CACpBC,IAAK,OACLC,aAGIC,EAAcC,YAAgB,CAClChB,KAAMiB,YAAeL,EAAeM,OAGhCC,EAAQC,YAAe,CAC3BC,QAASN,EACTO,WAAaC,GACJA,EAAqB,CAC1BC,mBAAmB,MAKnBC,EAAYC,YAAaP,G,2BCd/B,MAAMQ,EAAMC,gBAAK,IAAM,sDACVC,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHC,cAACC,IAAQ,CAAChB,MAAOA,EAAMiB,SACrBF,cAACG,IAAW,CAACC,QAAS,KAAMb,UAAWA,EAAUW,SAC/CF,cAACK,WAAQ,CACPC,SACEN,cAAA,OAAKO,UAAU,cAAaL,SAC1BF,cAACQ,IAAO,CAACC,UAAU,OAAOC,QAAQ,cAErCR,SAEDF,cAACW,IAAMC,WAAU,CAAAV,SACfF,cAACa,IAAa,CAAAX,SACZF,cAACP,EAAG,eAWhBzB,G","file":"static/js/main.eb9042f6.chunk.js","sourcesContent":["// Slices/authSlice.js\nimport { createSlice } from \"@reduxjs/toolkit\";\n\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState: {\n    user: null,\n    isAuthenticated: false,\n    token: null,\n  },\n  reducers: {\n    setUser: (state, action) => {\n      state.user = action.payload;\n    },\n    logout: (state) => {\n      state.user = null;\n      state.isAuthenticated = false;\n    },\n    setAuthenticated: (state, action) => {\n      state.isAuthenticated = action.payload;\n    },\n    setToken: (state, action) => {\n      state.token = action.payload;\n    },\n  },\n});\n\nexport const { setUser, logout, setAgeVerified, setAuthenticated, setToken } =\n  authSlice.actions;\nexport const selectUser = (state) => state.auth.user;\nexport const selectIsAuthenticated = (state) => state.auth.isAuthenticated;\nexport const selectsetToken = (state) => state.auth.token;\n\nexport default authSlice.reducer;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/* eslint-disable no-unused-vars */\n// Redux store.js\nimport { configureStore, combineReducers } from \"@reduxjs/toolkit\";\nimport { persistReducer, persistStore } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport authReducer from \"./Slices/AuthSlice\";\n\nconst persistConfig = {\n  key: \"root\",\n  storage,\n};\n\nconst rootReducer = combineReducers({\n  auth: persistReducer(persistConfig, authReducer),\n});\n\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: (getDefaultMiddleware) => {\n    return getDefaultMiddleware({\n      serializableCheck: false,\n    });\n  },\n});\n\nconst persistor = persistStore(store);\n\nexport { store, persistor };\n","/* eslint-disable no-unused-vars */\nimport React, { lazy, Suspense } from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { store, persistor } from \"./Redux/Store\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { Provider } from \"react-redux\";\n\nconst App = lazy(() => import(\"./App\"));\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <Suspense\n        fallback={\n          <div className=\"lazy_spiner\">\n            <Spinner animation=\"grow\" variant=\"success\" />\n          </div>\n        }\n      >\n        <React.StrictMode>\n          <BrowserRouter>\n            <App />\n          </BrowserRouter>\n        </React.StrictMode>\n      </Suspense>\n    </PersistGate>\n  </Provider>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
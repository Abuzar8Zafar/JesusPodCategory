{"version":3,"sources":["Components/Screen/Home/index.jsx"],"names":["Home","inputType","setInputType","useState","passwordVisible","setPasswordVisible","loading","setLoading","snackbarOpen","setSnackbarOpen","snackbarMessage","setSnackbarMessage","snackbarSeverity","setSnackbarSeverity","Cat","setCat","getCategories","useNavigate","useDispatch","async","categoryCollection","collection","firestore","categories","getDocs","docs","map","doc","id","data","error","console","useEffect","validationSchema","Yup","shape","cat","required","handleSubmit","docRef","addDoc","name","value","severity","log","showSnackbar","_jsxs","_Fragment","children","_jsx","CustomSnackBar","open","message","onClose","handleSnackbarClose","Formik","initialValues","onSubmit","values","_ref","setSubmitting","_ref2","errors","touched","handleChange","handleBlur","Form","className","style","width","Group","controlId","Label","Control","placeholder","onChange","disabled","concat","Spinner","height","marginTop","borderWidth","animation","role","Table","striped","bordered","hover","user","index","colSpan","cursor","padding"],"mappings":"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","file":"static/js/9.8c9f34a1.chunk.js","sourcesContent":["/* eslint-disable no-empty-pattern */\n/* eslint-disable no-unused-vars */\nimport { React, useEffect, useState } from \"react\";\nimport { Form, Spinner, Table } from \"react-bootstrap\";\nimport { Formik, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport closeEye from \"../../../assets/icon/close_eye.svg\";\nimport openEye from \"../../../assets/icon/open_eye.svg\";\nimport { NavLink, useNavigate } from \"react-router-dom\";\nimport CustomSnackBar from \"../../SnackBar/CustomSnackbar\";\n// import { setToken } from \"../../../store/reducer/AuthConfig\";\nimport { ToastMessage } from \"../../../utils/ToastMessage\";\nimport { signInWithEmailAndPassword } from \"firebase/auth\";\nimport { auth, firestore } from \"../../Firebase/Config\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  setAuthenticated,\n  setToken,\n  setUser,\n} from \"../../../Redux/Slices/AuthSlice\";\nimport { getSingleDoc } from \"../../Firebase/FirbaseService\";\nimport { addDoc, collection, getDocs } from \"firebase/firestore\";\n\nconst Home = () => {\n  const [inputType, setInputType] = useState(\"password\");\n  const [passwordVisible, setPasswordVisible] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\n  const [snackbarMessage, setSnackbarMessage] = useState(\"\");\n  const [snackbarSeverity, setSnackbarSeverity] = useState(\"info\");\n  const [Cat, setCat] = useState([]);\n\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const togglePasswordVisibility = () => {\n    setPasswordVisible(!passwordVisible);\n    setInputType(passwordVisible ? \"password\" : \"text\");\n  };\n\n  const getCategories = async () => {\n    try {\n      // Reference to the 'category' collection\n      const categoryCollection = collection(firestore, \"category\");\n\n      // Fetch all documents in the collection\n      const categorySnapshot = await getDocs(categoryCollection);\n\n      // Extract data from each document\n      const categories = categorySnapshot.docs.map((doc) => ({\n        id: doc.id,\n        ...doc.data(),\n      }));\n\n      // Log and return the categories\n      setCat(categories);\n      return categories;\n    } catch (error) {\n      console.error(\"Error fetching categories:\", error);\n      throw error;\n    }\n  };\n  useEffect(() => {\n    getCategories();\n  }, []);\n\n  // snackbar\n\n  const handleSnackbarClose = () => {\n    setSnackbarOpen(false);\n  };\n  const showSnackbar = (message, severity) => {\n    setSnackbarMessage(message);\n    setSnackbarSeverity(severity);\n    setSnackbarOpen(true);\n  };\n\n  const initialValues = {\n    cat: \"\",\n  };\n\n  const validationSchema = Yup.object().shape({\n    cat: Yup.string().required(\"Category name is required\"),\n  });\n\n  // handle submit\n\n  const handleSubmit = async (value) => {\n    setLoading(true);\n    try {\n      // Reference to the 'category' collection\n      const categoryCollection = collection(firestore, \"category\");\n\n      // Add a new document with a generated ID\n      const docRef = await addDoc(categoryCollection, {\n        name: value.cat,\n      });\n      showSnackbar(\"Added Sucessfully\", \"success\");\n      // Log the ID of the new document\n      console.log(\"Category added with ID:\", docRef.id);\n      setLoading(false);\n      getCategories();\n      // Return the document ID for later use\n      return docRef.id;\n    } catch (error) {\n      setLoading(false);\n      console.error(\"Error adding category\", error);\n      throw error;\n    }\n  };\n\n  return (\n    <>\n      <CustomSnackBar\n        open={snackbarOpen}\n        message={snackbarMessage}\n        severity={snackbarSeverity}\n        onClose={handleSnackbarClose}\n      />\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={(values, { setSubmitting }) => {\n          handleSubmit(values);\n        }}\n      >\n        {({\n          values,\n          errors,\n          touched,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n        }) => (\n          <Form\n            className=\"formHead\"\n            style={{ width: \"40%\" }}\n            onSubmit={handleSubmit}\n          >\n            <section className=\"bord\">\n              <Form.Group\n                className=\"mb-2 hideFocus2\"\n                controlId=\"formGroupEmail\"\n              >\n                <Form.Label className=\"lableHead\">Add Category</Form.Label>\n                <Form.Control\n                  className=\"radius_12\"\n                  placeholder=\"Enter name\"\n                  name=\"cat\"\n                  value={values.cat}\n                  onChange={handleChange}\n                />\n                {touched.cat && errors.cat && (\n                  <div className=\"errorMsg\">{errors.cat}</div>\n                )}\n              </Form.Group>\n\n              <div className=\"d-flex flex-column w-50\">\n                <button\n                  disabled={loading}\n                  className={`loginBtn mt-3 ${loading ? \"disbalebtn\" : \"\"}`}\n                >\n                  {loading ? (\n                    <Spinner\n                      style={{\n                        width: \"18px\",\n                        height: \"18px\",\n                        marginTop: \"3px\",\n                        borderWidth: \"0.15em\",\n                      }}\n                      animation=\"border\"\n                      role=\"status\"\n                    >\n                      <span className=\"visually-hidden\">Loading...</span>\n                    </Spinner>\n                  ) : (\n                    \"Submit\"\n                  )}\n                </button>\n              </div>\n            </section>\n          </Form>\n        )}\n      </Formik>\n\n      <Table striped bordered hover className=\"mt-5\" style={{ width: \"70%\" }}>\n        <thead>\n          <tr>\n            <th>#</th>\n            <th>Cat Name</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {Cat.map((user, index) => (\n            <tr key={index}>\n              <td>{index}</td>\n              <td colSpan={1}>{user.name}</td>\n              <td colSpan={1}>\n                <button\n                  className=\"loginBtn2\"\n                  style={{ cursor: \"pointer\", padding: \"2px 10px\" }}\n                >\n                  Delete\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n    </>\n  );\n};\n\nexport default Home;\n"],"sourceRoot":""}
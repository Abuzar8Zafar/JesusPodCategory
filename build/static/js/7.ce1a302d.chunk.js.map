{"version":3,"sources":["Components/Screen/Auth/Login.jsx","Components/Screen/Auth/Auth.jsx"],"names":["Login","inputType","setInputType","useState","passwordVisible","setPasswordVisible","loading","setLoading","snackbarOpen","setSnackbarOpen","snackbarMessage","setSnackbarMessage","snackbarSeverity","setSnackbarSeverity","navigate","useNavigate","dispatch","useDispatch","togglePasswordVisibility","showSnackbar","message","severity","validationSchema","Yup","shape","email","trim","required","password","min","_jsxs","_Fragment","children","_jsx","CustomSnackBar","open","onClose","handleSnackbarClose","Formik","initialValues","onSubmit","values","_ref","setSubmitting","async","_value$email","_value$email$toLowerC","_res$user2","res","signInWithEmailAndPassword","auth","value","toLowerCase","console","log","setTimeout","_res$user","setToken","user","uid","setAuthenticated","userData","getSingleDoc","setUser","error","code","handleSubmit","_ref2","errors","touched","handleChange","handleBlur","Form","className","Group","controlId","Label","Control","type","placeholder","name","onChange","src","openEye","closeEye","alt","onClick","disabled","concat","Spinner","style","width","height","marginTop","borderWidth","animation","role","Auth"],"mappings":"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","file":"static/js/7.ce1a302d.chunk.js","sourcesContent":["/* eslint-disable no-empty-pattern */\n/* eslint-disable no-unused-vars */\nimport { React, useState } from \"react\";\nimport { Form, Spinner } from \"react-bootstrap\";\nimport { Formik, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport closeEye from \"../../../assets/icon/close_eye.svg\";\nimport openEye from \"../../../assets/icon/open_eye.svg\";\nimport { NavLink, useNavigate } from \"react-router-dom\";\nimport CustomSnackBar from \"../../SnackBar/CustomSnackbar\";\n// import { setToken } from \"../../../store/reducer/AuthConfig\";\nimport { ToastMessage } from \"../../../utils/ToastMessage\";\nimport { signInWithEmailAndPassword } from \"firebase/auth\";\nimport { auth } from \"../../Firebase/Config\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  setAuthenticated,\n  setToken,\n  setUser,\n} from \"../../../Redux/Slices/AuthSlice\";\nimport { getSingleDoc } from \"../../Firebase/FirbaseService\";\n\nconst Login = () => {\n  const [inputType, setInputType] = useState(\"password\");\n  const [passwordVisible, setPasswordVisible] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\n  const [snackbarMessage, setSnackbarMessage] = useState(\"\");\n  const [snackbarSeverity, setSnackbarSeverity] = useState(\"info\");\n\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const togglePasswordVisibility = () => {\n    setPasswordVisible(!passwordVisible);\n    setInputType(passwordVisible ? \"password\" : \"text\");\n  };\n\n  // snackbar\n\n  const handleSnackbarClose = () => {\n    setSnackbarOpen(false);\n  };\n  const showSnackbar = (message, severity) => {\n    setSnackbarMessage(message);\n    setSnackbarSeverity(severity);\n    setSnackbarOpen(true);\n  };\n\n  const initialValues = {\n    email: \"\",\n    password: \"\",\n  };\n\n  const validationSchema = Yup.object().shape({\n    email: Yup.string()\n      .trim()\n      .email(\"Invalid email\")\n      .required(\"Email is required\"),\n    password: Yup.string()\n      .required(\"Password is required\")\n      .min(8, \"Password must be at least 8 characters\"),\n  });\n\n  // handle submit\n\n  const handleSubmit = async (value) => {\n    try {\n      setLoading(true);\n      const res = await signInWithEmailAndPassword(\n        auth,\n        value.email?.toLowerCase()?.trim(),\n        value.password\n      );\n\n      console.log(res);\n\n      setTimeout(() => {\n        dispatch(setToken(res?.user?.uid));\n        dispatch(setAuthenticated(true));\n      }, 500);\n      const userData = await getSingleDoc(res?.user?.uid, \"users\");\n      navigate(\"/\");\n\n      dispatch(setUser(userData));\n      setLoading(false);\n    } catch (error) {\n      setLoading(false);\n      if (error.code === \"auth/wrong-password\") {\n        showSnackbar(\"Please enter valid email & password\", \"error\");\n      }\n      if (error.code === \"auth/invalid-email\") {\n        showSnackbar(\"Please enter valid email & password\", \"error\");\n      }\n      if (error.code === \"auth/user-not-found\") {\n        showSnackbar(\"User Not Found\", \"error\");\n      }\n      if (error.code === \"auth/network-request-failed\") {\n        showSnackbar(\"Request Failed Please try again\", \"error\");\n      }\n      if (error.code === \"auth/too-many-requests\") {\n        showSnackbar(\"Too Many Request\");\n      }\n      if (error.code === \"auth/invalid-credential\") {\n        showSnackbar(\"Invalid Credential\", \"error\");\n      }\n      console.log(\"================LoginError\", error.code, error.message);\n    }\n  };\n\n  return (\n    <>\n      <CustomSnackBar\n        open={snackbarOpen}\n        message={snackbarMessage}\n        severity={snackbarSeverity}\n        onClose={handleSnackbarClose}\n      />\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={(values, { setSubmitting }) => {\n          handleSubmit(values);\n        }}\n      >\n        {({\n          values,\n          errors,\n          touched,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n        }) => (\n          <Form className=\"w-100 formHead\" onSubmit={handleSubmit}>\n            <h5 className=\"loginHead text-center mt-4 mb-4\">\n              Welcome Back Admin\n            </h5>\n            <h5 className=\"text-center loginsbHead mb-3\">\n              Please sign in to access your full account\n            </h5>\n            <section className=\"bord\">\n              <Form.Group\n                className=\"mb-2 hideFocus2\"\n                controlId=\"formGroupEmail\"\n              >\n                <Form.Label className=\"lableHead\">\n                  Username or email address{\" \"}\n                </Form.Label>\n                <Form.Control\n                  className=\"radius_12\"\n                  type=\"email\"\n                  placeholder=\"Enter email\"\n                  name=\"email\"\n                  value={values.email}\n                  onChange={handleChange}\n                />\n                {touched.email && errors.email && (\n                  <div className=\"errorMsg\">{errors.email}</div>\n                )}\n              </Form.Group>\n              <Form.Group\n                className=\"mb-2 hideFocus2\"\n                controlId=\"formGroupPassword\"\n              >\n                <Form.Label className=\"lableHead\">Password</Form.Label>\n                <div className=\"d-flex align-items-center position-relative\">\n                  <Form.Control\n                    className=\"radius_12\"\n                    type={inputType}\n                    placeholder=\"Password\"\n                    value={values.password}\n                    onChange={handleChange}\n                    name=\"password\"\n                  />\n                  <img\n                    className=\"pass_img\"\n                    src={passwordVisible ? openEye : closeEye}\n                    alt=\"\"\n                    onClick={togglePasswordVisibility}\n                  />\n                </div>\n                {touched.password && errors.password && (\n                  <div className=\"errorMsg\">{errors.password}</div>\n                )}\n              </Form.Group>\n              <div className=\"d-flex flex-column\">\n                <button\n                  disabled={loading}\n                  className={`loginBtn mt-3 ${loading ? \"disbalebtn\" : \"\"}`}\n                >\n                  {loading ? (\n                    <Spinner\n                      style={{\n                        width: \"18px\",\n                        height: \"18px\",\n                        marginTop: \"3px\",\n                        borderWidth: \"0.15em\",\n                      }}\n                      animation=\"border\"\n                      role=\"status\"\n                    >\n                      <span className=\"visually-hidden\">Loading...</span>\n                    </Spinner>\n                  ) : (\n                    \"Login\"\n                  )}\n                </button>\n              </div>\n            </section>\n          </Form>\n        )}\n      </Formik>\n    </>\n  );\n};\n\nexport default Login;\n","/* eslint-disable no-unused-vars */\nimport React from \"react\";\nimport Login from \"./Login\";\nimport SignUp from \"./Signup\";\nimport { Tab, Tabs } from \"react-bootstrap\";\n\nconst Auth = () => {\n  return (\n    <>\n      <section className=\"sectionTop mt-5\">\n        <div className=\"mainTab00\">\n          <h5 className=\"authHead text-center mt-3 mb-3\">My Account</h5>\n          <Login />\n        </div>\n      </section>\n    </>\n  );\n};\n\nexport default Auth;\n"],"sourceRoot":""}
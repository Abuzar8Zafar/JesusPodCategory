{"version":3,"sources":["Components/Screen/AddCategory/ListCategory.jsx"],"names":["ListCategory","_Rowdata$category","channelLoading","setChannelLoading","useState","Chanalsdata","setChanalsdata","Editmodal","setEditmodal","inputType","setInputType","passwordVisible","setPasswordVisible","loading","setLoading","snackbarOpen","setSnackbarOpen","snackbarMessage","setSnackbarMessage","snackbarSeverity","setSnackbarSeverity","Cat","setCat","RowID","setRowID","profileImage","setProfileImage","SelectedImg","setSelectedImg","Rowdata","setRowdata","loadingupload","setloadingupload","getChannelsWithCategories","async","channelsCollection","collection","firestore","channels","getDocs","docs","map","doc","id","data","error","console","SelectImage","e","file","target","files","reader","FileReader","onloadend","result","readAsDataURL","courseFile","currentDate","Date","uniqueFileName","concat","getTime","name","imageRef","ref","storage","uploadBytes","then","snapshot","getDownloadURL","url","showSnackbar","uploadImage","initialValues","cat","category","find","getCategoryIDByName","title","validationSchema","Yup","shape","required","message","severity","useEffect","categoryCollection","categories","getCategories","columns","selector","row","index","maxWidth","minWidth","_jsx","ImageLoader","classes","imageUrl","circeltrue","_row$category","cell","_jsxs","_Fragment","children","className","style","cursor","padding","onClick","handleEdit","marginLeft","channelRef","deleteDoc","handleDelete","CustomSnackbar","open","onClose","handleSnackbarClose","Modal","footer","centered","onCancel","handleCancel","Formik","enableReinitialize","onSubmit","values","_ref","setSubmitting","categoryDocRef","categoryDoc","getDoc","exists","Error","categoryData","docRef","updateDoc","sub","download","star","handleSubmit","_ref2","errors","touched","handleChange","handleBlur","Form","Group","controlId","Label","Select","value","onChange","Control","placeholder","flexDirection","position","htmlFor","Spinner","width","height","marginTop","borderWidth","top","right","zIndex","color","animation","role","src","alt","objectFit","borderRadius","fileavatar","InputStrap","type","disabled","DataTable","pagination"],"mappings":"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","file":"static/js/5.4aca32b6.chunk.js","sourcesContent":["/* eslint-disable no-unused-vars */\nimport React, { useEffect, useState } from \"react\";\nimport { Spinner } from \"react-bootstrap\";\nimport { Form, Table } from \"react-bootstrap\";\nimport DataTable from \"react-data-table-component\";\nimport ImageLoader from \"../../ImageLoader/ImageLoader\";\nimport {\n  addDoc,\n  collection,\n  doc,\n  getDoc,\n  getDocs,\n  setDoc,\n  deleteDoc,\n  updateDoc,\n} from \"firebase/firestore\";\nimport { Input as InputStrap } from \"reactstrap\";\n\nimport { auth, firestore, storage } from \"../../Firebase/Config\";\nimport { Modal } from \"antd\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { Formik, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport CustomSnackbar from \"../../SnackBar/CustomSnackbar\";\n\nimport fileavatar from \"../../../assets/images/profileavatar.jpg\";\nimport { getDownloadURL, ref, uploadBytes } from \"firebase/storage\";\n\nconst ListCategory = () => {\n  const [channelLoading, setChannelLoading] = useState(false);\n  const [Chanalsdata, setChanalsdata] = useState([]);\n  const [Editmodal, setEditmodal] = useState(false);\n  const [inputType, setInputType] = useState(\"password\");\n  const [passwordVisible, setPasswordVisible] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\n  const [snackbarMessage, setSnackbarMessage] = useState(\"\");\n  const [snackbarSeverity, setSnackbarSeverity] = useState(\"info\");\n  const [Cat, setCat] = useState([]);\n  const [RowID, setRowID] = useState(\"\");\n  const [profileImage, setProfileImage] = useState(\"\");\n  const [SelectedImg, setSelectedImg] = useState(\"\");\n  const [Rowdata, setRowdata] = useState(\"\");\n  const [loadingupload, setloadingupload] = useState(false);\n\n  const getCategories = async () => {\n    try {\n      // Reference to the 'category' collection\n      const categoryCollection = collection(firestore, \"category\");\n\n      // Fetch all documents in the collection\n      const categorySnapshot = await getDocs(categoryCollection);\n\n      // Extract data from each document\n      const categories = categorySnapshot.docs.map((doc) => ({\n        id: doc.id,\n        ...doc.data(),\n      }));\n\n      // Log and return the categories\n      setCat(categories);\n      return categories;\n    } catch (error) {\n      console.error(\"Error fetching categories:\", error);\n      throw error;\n    }\n  };\n\n  const getChannelsWithCategories = async () => {\n    setChannelLoading(true);\n    try {\n      const channelsCollection = collection(firestore, \"Newchannels\");\n      const channelsSnapshot = await getDocs(channelsCollection);\n      const channels = channelsSnapshot.docs.map((doc) => ({\n        id: doc.id,\n        ...doc.data(),\n      }));\n      setChanalsdata(channels);\n      setChannelLoading(false);\n    } catch (error) {\n      console.error(\"Error fetching channels with categories:\", error);\n      setChannelLoading(false);\n      throw error;\n    }\n  };\n\n  const uploadImage = (courseFile) => {\n    if (!courseFile) return;\n    setloadingupload(true);\n    const currentDate = new Date();\n    const uniqueFileName = `${currentDate.getTime()}_${courseFile?.name}`;\n    const imageRef = ref(storage, `UserImages/${uniqueFileName}`);\n    uploadBytes(imageRef, courseFile).then((snapshot) => {\n      getDownloadURL(snapshot.ref).then((url) => {\n        showSnackbar(\"Image Added Sucessfully\", \"success\");\n        setProfileImage(url);\n        setloadingupload(false);\n      });\n    });\n  };\n\n  const SelectImage = (e) => {\n    const file = e.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setSelectedImg(reader.result);\n      };\n      reader.readAsDataURL(file);\n    } else {\n      setSelectedImg(null);\n    }\n    if (file) {\n      uploadImage(file);\n    }\n  };\n\n  const getCategoryIDByName = (name) => {\n    const category = Cat.find((category) => category.name === name);\n    return category?.id;\n  };\n\n  const initialValues = {\n    cat: getCategoryIDByName(Rowdata?.category?.name),\n    title: Rowdata?.title,\n    url: Rowdata?.url,\n  };\n\n  const validationSchema = Yup.object().shape({\n    cat: Yup.string().required(\"Category name is required\"),\n    title: Yup.string().required(\"Title is required\"),\n    url: Yup.string().required(\"Feed url is required\"),\n  });\n\n  const handleDelete = async (id) => {\n    try {\n      const channelRef = collection(firestore, \"Newchannels\");\n      await deleteDoc(doc(channelRef, id));\n      // After deletion, refresh data\n      getChannelsWithCategories();\n    } catch (error) {\n      console.error(\"Error deleting channel:\", error);\n    }\n  };\n\n  const handleSubmit = async (values) => {\n    setLoading(true);\n    try {\n      // Fetch the category object by categoryId\n      const categoryDocRef = doc(firestore, \"category\", values?.cat);\n      const categoryDoc = await getDoc(categoryDocRef);\n\n      if (!categoryDoc.exists()) {\n        setLoading(false);\n        throw new Error(\"Category not found\");\n      }\n\n      const categoryData = categoryDoc.data();\n\n      // Reference to the 'channels' collection\n      const channelsCollection = collection(firestore, \"Newchannels\");\n\n      let docRef;\n\n      if (RowID) {\n        // Update the existing document\n        docRef = doc(firestore, \"Newchannels\", RowID);\n        await updateDoc(docRef, {\n          title: values?.title,\n          imageUrl: profileImage,\n          url: values?.url,\n          category: categoryData, // Including the full category object\n          // Assuming you want to update these fields as well\n          sub: [],\n          download: [],\n          star: [],\n        });\n        setEditmodal(false);\n        showSnackbar(\"Podcast Updated Successfully\", \"success\");\n      }\n\n      return docRef.id;\n    } catch (error) {\n      setLoading(false);\n      console.error(\"Error adding or updating channel:\", error);\n      throw error;\n    }\n  };\n\n  const showSnackbar = (message, severity) => {\n    setSnackbarMessage(message);\n    setSnackbarSeverity(severity);\n    setSnackbarOpen(true);\n  };\n\n  const handleEdit = (row) => {\n    setRowdata(row);\n    setRowID(row?.id);\n    setProfileImage(row?.imageUrl);\n    setEditmodal(true);\n  };\n\n  const handleCancel = () => {\n    setEditmodal(false);\n  };\n\n  useEffect(() => {\n    getChannelsWithCategories();\n    getCategories();\n  }, []);\n\n  const columns = [\n    {\n      name: \"#\",\n      selector: (row, index) => index,\n      maxWidth: \"7rem\",\n      minWidth: \"2rem\",\n    },\n    {\n      name: \"Image\",\n      selector: (row) => (\n        <ImageLoader\n          classes={\"tableImg\"}\n          imageUrl={row?.imageUrl}\n          circeltrue={true}\n        />\n      ),\n      maxWidth: \"7rem\",\n      minWidth: \"2rem\",\n    },\n    {\n      name: \"Title\",\n      selector: (row) => row?.title,\n      maxWidth: \"10rem\",\n      minWidth: \"4rem\",\n    },\n    {\n      name: \"Cat Name\",\n      selector: (row) => row?.category?.name,\n      maxWidth: \"7rem\",\n      minWidth: \"2rem\",\n    },\n    {\n      name: \"Feed Url\",\n      selector: (row) => row?.url,\n      maxWidth: \"30rem\",\n      minWidth: \"20rem\",\n    },\n    {\n      name: \"Actions\",\n      cell: (row) => (\n        <>\n          <button\n            className=\"loginBtn2\"\n            style={{ cursor: \"pointer\", padding: \"2px 10px\" }}\n            onClick={() => handleEdit(row)}\n          >\n            Edit\n          </button>\n          <button\n            className=\"loginBtn2\"\n            style={{ cursor: \"pointer\", padding: \"2px 10px\", marginLeft: 20 }}\n            onClick={() => handleDelete(row.id)}\n          >\n            Delete\n          </button>\n        </>\n      ),\n      maxWidth: \"10rem\",\n      minWidth: \"10rem\",\n    },\n  ];\n  const handleSnackbarClose = () => {\n    setSnackbarOpen(false);\n  };\n\n  return (\n    <>\n      <CustomSnackbar\n        open={snackbarOpen}\n        message={snackbarMessage}\n        severity={snackbarSeverity}\n        onClose={handleSnackbarClose}\n      />\n      <Modal\n        title=\"Basic Modal\"\n        footer={false}\n        open={Editmodal}\n        centered\n        onCancel={handleCancel}\n      >\n        <Formik\n          initialValues={initialValues}\n          enableReinitialize={true}\n          validationSchema={validationSchema}\n          onSubmit={(values, { setSubmitting }) => {\n            handleSubmit(values);\n          }}\n        >\n          {({\n            values,\n            errors,\n            touched,\n            handleChange,\n            handleBlur,\n            handleSubmit,\n          }) => (\n            <Form\n              className=\"formHead\"\n              // style={{ width: \"40%\" }}\n              onSubmit={handleSubmit}\n            >\n              <section>\n                <Form.Group\n                  className=\"mb-2 hideFocus2\"\n                  controlId=\"formGroupEmail\"\n                >\n                  <Form.Label className=\"lableHead\">Add Category</Form.Label>\n\n                  <Form.Select\n                    aria-label=\"Default select example\"\n                    className=\"radius_12\"\n                    name=\"cat\"\n                    value={values.cat}\n                    onChange={handleChange}\n                  >\n                    {Cat.map((category) => (\n                      <option key={category.id} value={category.id}>\n                        {category.name}\n                      </option>\n                    ))}\n                  </Form.Select>\n\n                  {touched.cat && errors.cat && (\n                    <div className=\"errorMsg\">{errors.cat}</div>\n                  )}\n\n                  <Form.Label className=\"lableHead mt-3\">Add Title</Form.Label>\n\n                  <Form.Control\n                    className=\"radius_12 \"\n                    placeholder=\"Title\"\n                    name=\"title\"\n                    value={values.title}\n                    onChange={handleChange}\n                  />\n                  {touched.title && errors.title && (\n                    <div className=\"errorMsg\">{errors.title}</div>\n                  )}\n\n                  <Form.Label className=\"lableHead mt-3\">\n                    Add Feed Url\n                  </Form.Label>\n                  <Form.Control\n                    className=\"radius_12 \"\n                    placeholder=\"Url\"\n                    name=\"url\"\n                    value={values.url}\n                    onChange={handleChange}\n                  />\n                  {touched.url && errors.url && (\n                    <div className=\"errorMsg\">{errors.url}</div>\n                  )}\n                </Form.Group>\n\n                <div className=\"d-flex \" style={{ flexDirection: \"column\" }}>\n                  <h6 className=\"lableHead mt-2 mb-2\">Upload Image</h6>\n                  <div>\n                    <label\n                      style={{ cursor: \"pointer\", position: \"relative\" }}\n                      htmlFor=\"fileInput\"\n                      className=\"cursor-pointer\"\n                    >\n                      {loadingupload && (\n                        <Spinner\n                          style={{\n                            width: \"18px\",\n                            height: \"18px\",\n                            marginTop: \"3px\",\n                            borderWidth: \"0.15em\",\n                            position: \"absolute\",\n                            top: \"2rem\",\n                            right: \"2.5rem\",\n                            zIndex: \"99999\",\n                            color: \"white\",\n                          }}\n                          animation=\"border\"\n                          role=\"status\"\n                        >\n                          <span className=\"visually-hidden\">Loading...</span>\n                        </Spinner>\n                      )}\n                      {profileImage ? (\n                        <>\n                          <img\n                            src={profileImage}\n                            alt=\"Preview\"\n                            style={{\n                              width: \"100px\",\n                              height: \"100px\",\n                              objectFit: \"cover\",\n                              borderRadius: \"50%\",\n                              position: \"relative\",\n                            }}\n                            className=\"object-cover\"\n                          />\n                        </>\n                      ) : (\n                        <div className=\"border radius_50 flex justify-content-center items-center\">\n                          <img\n                            src={fileavatar}\n                            alt=\"Camera Icon\"\n                            width={80}\n                            height={80}\n                          />\n                        </div>\n                      )}\n                    </label>\n\n                    <InputStrap\n                      type=\"file\"\n                      // required\n                      id=\"fileInput\"\n                      className=\"visually-hidden\"\n                      onChange={SelectImage}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"d-flex flex-column w-50\">\n                  <button\n                    disabled={loading}\n                    className={`loginBtn mt-3 ${loading ? \"disbalebtn\" : \"\"}`}\n                  >\n                    {loading ? (\n                      <Spinner\n                        style={{\n                          width: \"18px\",\n                          height: \"18px\",\n                          marginTop: \"3px\",\n                          borderWidth: \"0.15em\",\n                        }}\n                        animation=\"border\"\n                        role=\"status\"\n                      >\n                        <span className=\"visually-hidden\">Loading...</span>\n                      </Spinner>\n                    ) : (\n                      \"Submit\"\n                    )}\n                  </button>\n                </div>\n              </section>\n            </Form>\n          )}\n        </Formik>\n      </Modal>\n\n      {channelLoading ? (\n        <div className=\"text-center\">\n          <Spinner\n            style={{\n              width: \"18px\",\n              height: \"18px\",\n              marginTop: \"3px\",\n              borderWidth: \"0.15em\",\n            }}\n            animation=\"border\"\n            role=\"status\"\n          >\n            <span className=\"visually-hidden\">Loading...</span>\n          </Spinner>\n        </div>\n      ) : (\n        <DataTable columns={columns} data={Chanalsdata} pagination />\n      )}\n    </>\n  );\n};\n\nexport default ListCategory;\n"],"sourceRoot":""}